{"version":3,"sources":["components/CompactTable.js","components/MissingReport.js","components/Code.js","components/Unserializer.js","components/SitesAdmin.js","components/App.js","reportWebVitals.js","index.js"],"names":["CompactTable","styled","Table","Link","Typography","MISSING_REPORT_QUERY","gql","MissingReport","setMissing","useQuery","data","loading","error","tip","span","message","description","type","showIcon","console","log","targetData","missingReport","columns","title","dataIndex","key","render","entries","record","index","onClick","length","dataSource","pagination","StyledIcon","CopyOutlined","StyledDiv","div","Code","props","text","children","className","UNSERIALIZE_QUERY","Unserializer","Form","useForm","form","outputFormat","getFieldValue","useLazyQuery","getUnserialized","xs","md","name","onFinish","value","variables","input","Item","label","rules","required","TextArea","autoSize","maxRows","minRows","allowClear","Group","defaultValue","htmlType","unserialize","syntax","SITES_ADMIN_QUERY","SitesAdmin","getSiteInfo","siteInfo","siteData","Object","site","map","sitename","scroll","y","Header","Layout","Content","App","useState","missing","mode","theme","to","exact","path","id","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.664d1127.chunk.js","sourcesContent":["import { Table } from 'antd';\nimport styled from 'styled-components';\n\nexport const CompactTable = styled(Table)`\n  .ant-table-tbody,\n  .ant-table-thead {\n    tr,\n    tr.ant-table-row,\n    tr.ant-table-row:hover {\n      td,\n      th {\n        padding-top: 4px;\n        padding-bottom: 4px;\n      }\n    }\n  }\n`;\n","import { useQuery, gql } from '@apollo/client';\nimport React, { Fragment, useState } from 'react';\nimport Entity from './Entity';\nimport { Spin, Col, Row, Alert, Typography } from 'antd';\nimport { CompactTable } from './CompactTable';\n\nconst { Link } = Typography;\n\nconst MISSING_REPORT_QUERY = gql`\n  {\n    missingReport {\n      title\n      key\n      sourceCount\n      migratedCount\n      skippedCount\n\n      missing {\n        id\n        data\n      }\n    }\n  }\n`;\n\nconst MissingReport = ({ setMissing }) => {\n  const { data, loading, error } = useQuery(MISSING_REPORT_QUERY);\n\n  if (loading) {\n    return <Spin tip=\"Loading\" />;\n  }\n  if (error) {\n    return (\n      <Col span={6}>\n        <Alert\n          message=\"Error loading data.\"\n          description={error.message}\n          type=\"error\"\n          showIcon\n        ></Alert>\n      </Col>\n    );\n  }\n\n  if (!data) {\n    return <p>Not found!</p>;\n  }\n\n  console.log('Got data', data);\n  const targetData = data.missingReport;\n  const columns = [\n    { title: 'Entity', dataIndex: 'title', key: 'title' },\n    { title: 'Key', dataIndex: 'key', key: 'key' },\n    { title: 'Source count', dataIndex: 'sourceCount', key: 'sourceCount' },\n    {\n      title: 'Migrated count',\n      dataIndex: 'migratedCount',\n      key: 'migratedCount',\n    },\n    { title: 'Skipped count', dataIndex: 'skippedCount', key: 'skippedCount' },\n    {\n      title: 'Missing count',\n      dataIndex: 'missing',\n      key: 'missingCount',\n      render: (entries, record, index) => {\n        return (\n          <Link onClick={() => setMissing(entries)}>{entries.length}</Link>\n        );\n      },\n    },\n  ];\n\n  return (\n    <Row>\n      <CompactTable\n        dataSource={targetData}\n        columns={columns}\n        pagination={false}\n      />\n    </Row>\n  );\n};\n\nexport default MissingReport;\n","import React from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport { CopyOutlined } from '@ant-design/icons';\nimport styled from 'styled-components';\n\nconst StyledIcon = styled(CopyOutlined)`\n  font-size: 1.5em;\n`;\n\nconst StyledDiv = styled.div`\n  position: relative;\n\n  .copy-me {\n    position: absolute;\n    right: 20px;\n    top: 20px;\n  }\n`;\n\nconst Code = (props) => {\n  return (\n    <StyledDiv>\n      <CopyToClipboard text={props.children} className=\"copy-me\">\n        <StyledIcon />\n      </CopyToClipboard>\n      <SyntaxHighlighter {...props}>{props.children}</SyntaxHighlighter>\n    </StyledDiv>\n  );\n};\n\nexport default Code;\n","import { Form, Input, Button, Radio } from 'antd';\nimport { useLazyQuery, gql } from '@apollo/client';\nimport React, { useState } from 'react';\nimport { Col, Row, Card } from 'antd';\nimport Code from './Code';\n\nconst UNSERIALIZE_QUERY = gql`\n  query Unserialize($input: String!, $outputFormat: String!) {\n    unserialize(input: $input, outputFormat: $outputFormat)\n  }\n`;\n\nconst Unserializer = () => {\n  const [form] = Form.useForm();\n\n  const outputFormat = form.getFieldValue('outputFormat') || 'json';\n\n  const [getUnserialized, { data, loading, error }] =\n    useLazyQuery(UNSERIALIZE_QUERY);\n\n  const onFormSubmit = (value) => {\n    getUnserialized({\n      variables: {\n        input: value.input,\n        outputFormat: value.outputFormat || 'json',\n      },\n    });\n  };\n\n  return (\n    <>\n      <Row>\n        <Col span={12} xs={24} md={12}>\n          <Card title=\"Unserializer\">\n            <Form form={form} name=\"serialized_input\" onFinish={onFormSubmit}>\n              <Form.Item\n                name=\"input\"\n                label=\"Serialized input\"\n                rules={[{ required: true }]}\n              >\n                <Input.TextArea\n                  autoSize={{ maxRows: 10, minRows: 4 }}\n                  allowClear={true}\n                  value={''}\n                />\n              </Form.Item>\n              <Form.Item name=\"outputFormat\" label=\"Output format\">\n                <Radio.Group defaultValue=\"json\" value=\"json\">\n                  <Radio value={'json'}>JSON</Radio>\n                  <Radio value={'php'}>var_export()</Radio>\n                </Radio.Group>\n              </Form.Item>\n              <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Submit\n                </Button>\n              </Form.Item>\n            </Form>\n          </Card>\n        </Col>\n        <Col span={12} xs={24} md={12}>\n          <Card title=\"Output\">\n            {error &&\n              error['graphQLErrors'] &&\n              error['graphQLErrors'][0]['message']}\n            {data && data.unserialize ? (\n              <Code syntax={outputFormat}>{data.unserialize}</Code>\n            ) : (\n              'Paste in a string of serialize()-d input to decode and display it here'\n            )}\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default Unserializer;\n","import { Card, Row, Col } from 'antd';\nimport { Form, Input, Button } from 'antd';\nimport { useLazyQuery, gql } from '@apollo/client';\n\nimport { CompactTable } from './CompactTable';\n\nconst SITES_ADMIN_QUERY = gql`\n  query Site($sitename: String!) {\n    site(sitename: $sitename)\n  }\n`;\nconst SitesAdmin = () => {\n  const [form] = Form.useForm();\n\n  const [getSiteInfo, { data, loading, error }] =\n    useLazyQuery(SITES_ADMIN_QUERY);\n\n  const siteInfo = data;\n\n  const onSubmit = (value) => {\n    getSiteInfo({\n      variables: {\n        sitename: value.sitename,\n      },\n    });\n  };\n\n  if (siteInfo) {\n    console.log('Site info is now', siteInfo);\n  }\n\n  const siteData = siteInfo\n    ? Object.entries(siteInfo.site).map(([key, value]) => {\n        return { key, name: key, value };\n      })\n    : [];\n\n  console.log('SiteDATA', siteInfo, siteData);\n\n  return (\n    <>\n      <Row>\n        <Col span={12} xs={24} md={12}>\n          <Card title=\"SitesAdmin\">\n            <Form form={form} onFinish={onSubmit}>\n              <Form.Item\n                name=\"sitename\"\n                label=\"Domain name of the site\"\n                rules={[{ required: true }]}\n              >\n                <Input allowClear></Input>\n              </Form.Item>\n              <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Query\n                </Button>\n              </Form.Item>\n            </Form>\n          </Card>\n        </Col>\n        <Col span={12} xs={24} md={12}>\n          <Card title=\"Output\">\n            <CompactTable\n              dataSource={siteData}\n              scroll={{\n                y: 400,\n              }}\n              pagination={false}\n              columns={[\n                { title: 'Parameter', key: 'parameter', dataIndex: 'name' },\n                { title: 'Value', key: 'parameter-value', dataIndex: 'value' },\n              ]}\n            />\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default SitesAdmin;\n","import React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  NavLink as Link,\n} from 'react-router-dom';\nimport './../styles/App.css';\nimport MissingReport from './MissingReport';\nimport Unserializer from './Unserializer';\nimport SitesAdmin from './SitesAdmin';\nimport { Layout, Table, Menu } from 'antd';\n\nconst { Header, Content } = Layout;\n\nfunction App() {\n  const [missing, setMissing] = useState([]);\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Layout className=\"layout\">\n          <Header>\n            <Menu mode=\"horizontal\" theme=\"dark\">\n              <Menu.Item>\n                <Link to=\"/missing-report\">Missing Report</Link>\n              </Menu.Item>\n              <Menu.Item>\n                <Link to=\"/sites-admin\">Sites Admin</Link>\n              </Menu.Item>\n              <Menu.Item>\n                <Link to=\"/unserialize\">Unserialize</Link>\n              </Menu.Item>\n            </Menu>\n          </Header>\n          <Content>\n            <Route\n              exact\n              path=\"/missing-report\"\n              render={(props) => (\n                <>\n                  <MissingReport setMissing={setMissing} />\n                  {missing.length && (\n                    <Table\n                      dataSource={missing.map(({ id, data }) => data)}\n                      columns={[\n                        { title: 'ID', dataIndex: 'msg_id', key: 'id' },\n                      ]}\n                    />\n                  )}\n                </>\n              )}\n            />\n            <Route exact path=\"/sites-admin\" component={SitesAdmin} />\n            <Route\n              exact\n              path=\"/unserialize\"\n              render={(props) => <Unserializer />}\n            />\n          </Content>\n        </Layout>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n} from '@apollo/client';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}