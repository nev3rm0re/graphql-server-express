{"version":3,"sources":["components/Code.js","components/Unserializer.js","components/CompactTable.js","components/SitesAdmin.js","components/XenforoEntity.tsx","components/DBQuery.tsx","components/App.js","reportWebVitals.js","index.js"],"names":["StyledIcon","styled","CopyOutlined","StyledDiv","div","Code","props","text","children","className","UNSERIALIZE_QUERY","gql","Unserializer","Form","useForm","form","outputFormat","getFieldValue","useLazyQuery","getUnserialized","data","error","loading","span","xs","md","title","name","onFinish","value","variables","input","Item","label","rules","required","TextArea","autoSize","maxRows","minRows","allowClear","Group","defaultValue","type","htmlType","unserialize","syntax","CompactTable","Table","SITES_ADMIN_QUERY","SitesAdmin","getSiteInfo","siteInfo","console","log","siteData","site","Object","entries","map","key","sitename","dataSource","scroll","y","pagination","columns","dataIndex","ENTITY_DETAILS_QUERY","XenforoEntity","useState","entityName","setEntityName","getEntityDetails","xenforoEntity","onChange","el","target","onClick","a","columnName","maxLength","default","allowedValues","length","v","join","makeFieldInfo","GET_DATABASES_QUERY","MULTI_DB_QUERY","filterFn","filter","db","isMatch","match","e","SyntaxError","DBList","databases","onFilter","setFilter","useEffect","placeholder","QueryBox","filtered","queryFn","query","setQuery","style","display","ResultsDisplay","results","resultsTable","result","index","database","rowCount","message","DBQuery","useQuery","setFiltered","fetchPolicy","queryMulti","entriesData","resultsLoading","entriesError","multiQuery","flexDirection","width","height","vars","Header","Layout","Content","App","mode","theme","to","path","isExact","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","createHttpLink","uri","process","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.f0692704.chunk.js","sourcesContent":["import React from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport { CopyOutlined } from '@ant-design/icons';\nimport styled from 'styled-components';\n\nconst StyledIcon = styled(CopyOutlined)`\n  font-size: 1.5em;\n`;\n\nconst StyledDiv = styled.div`\n  position: relative;\n\n  .copy-me {\n    position: absolute;\n    right: 20px;\n    top: 20px;\n  }\n`;\n\nconst Code = (props) => {\n  return (\n    <StyledDiv>\n      <CopyToClipboard text={props.children} className=\"copy-me\">\n        <StyledIcon />\n      </CopyToClipboard>\n      <SyntaxHighlighter {...props}>{props.children}</SyntaxHighlighter>\n    </StyledDiv>\n  );\n};\n\nexport default Code;\n","import { Form, Input, Button, Radio } from 'antd';\nimport { useLazyQuery, gql } from '@apollo/client';\nimport React, { useState } from 'react';\nimport { Col, Row, Card } from 'antd';\nimport Code from './Code';\n\nconst UNSERIALIZE_QUERY = gql`\n  query Unserialize($input: String!, $outputFormat: String!) {\n    unserialize(input: $input, outputFormat: $outputFormat)\n  }\n`;\n\nconst Unserializer = () => {\n  const [form] = Form.useForm();\n\n  const outputFormat = form.getFieldValue('outputFormat') || 'json';\n\n  const [getUnserialized, { data, loading, error }] =\n    useLazyQuery(UNSERIALIZE_QUERY);\n\n  const onFormSubmit = (value) => {\n    getUnserialized({\n      variables: {\n        input: value.input,\n        outputFormat: value.outputFormat || 'json',\n      },\n    });\n  };\n\n  return (\n    <>\n      <Row>\n        <Col span={12} xs={24} md={12}>\n          <Card title=\"Unserializer\">\n            <Form form={form} name=\"serialized_input\" onFinish={onFormSubmit}>\n              <Form.Item\n                name=\"input\"\n                label=\"Serialized input\"\n                rules={[{ required: true }]}\n              >\n                <Input.TextArea\n                  autoSize={{ maxRows: 10, minRows: 4 }}\n                  allowClear={true}\n                  value={''}\n                />\n              </Form.Item>\n              <Form.Item name=\"outputFormat\" label=\"Output format\">\n                <Radio.Group defaultValue=\"json\" value=\"json\">\n                  <Radio value={'json'}>JSON</Radio>\n                  <Radio value={'php'}>var_export()</Radio>\n                </Radio.Group>\n              </Form.Item>\n              <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Submit\n                </Button>\n              </Form.Item>\n            </Form>\n          </Card>\n        </Col>\n        <Col span={12} xs={24} md={12}>\n          <Card title=\"Output\">\n            {error &&\n              error['graphQLErrors'] &&\n              error['graphQLErrors'][0]['message']}\n            {data && data.unserialize ? (\n              <Code syntax={outputFormat}>{data.unserialize}</Code>\n            ) : (\n              'Paste in a string of serialize()-d input to decode and display it here'\n            )}\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default Unserializer;\n","import { Table } from 'antd';\nimport styled from 'styled-components';\n\nexport const CompactTable = styled(Table)`\n  .ant-table-tbody,\n  .ant-table-thead {\n    tr,\n    tr.ant-table-row,\n    tr.ant-table-row:hover {\n      td,\n      th {\n        padding-top: 4px;\n        padding-bottom: 4px;\n      }\n    }\n  }\n`;\n","import { Card, Row, Col } from 'antd';\nimport { Form, Input, Button } from 'antd';\nimport { useLazyQuery, gql } from '@apollo/client';\n\nimport { CompactTable } from './CompactTable';\n\nconst SITES_ADMIN_QUERY = gql`\n  query Site($sitename: String!) {\n    site(sitename: $sitename)\n  }\n`;\nconst SitesAdmin = () => {\n  const [form] = Form.useForm();\n\n  const [getSiteInfo, { data, loading, error }] = useLazyQuery(\n    SITES_ADMIN_QUERY,\n  );\n\n  const siteInfo = data;\n\n  const onSubmit = (value) => {\n    getSiteInfo({\n      variables: {\n        sitename: value.sitename,\n      },\n    });\n  };\n\n  if (siteInfo) {\n    console.log('Site info is now', siteInfo);\n  }\n\n  const siteData =\n    siteInfo && siteInfo.site\n      ? Object.entries(siteInfo.site).map(([key, value]) => {\n          return { key, name: key, value };\n        })\n      : [];\n\n  console.log('SiteDATA', siteInfo, siteData);\n\n  return (\n    <>\n      <Row>\n        <Col span={12} xs={24} md={12}>\n          <Card title=\"SitesAdmin\">\n            <Form form={form} onFinish={onSubmit}>\n              <Form.Item\n                name=\"sitename\"\n                label=\"Domain name of the site\"\n                rules={[{ required: true }]}\n              >\n                <Input allowClear></Input>\n              </Form.Item>\n              <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Query\n                </Button>\n              </Form.Item>\n            </Form>\n          </Card>\n        </Col>\n        <Col span={12} xs={24} md={12}>\n          <Card title=\"Output\">\n            <CompactTable\n              dataSource={siteData}\n              scroll={{\n                y: 400,\n              }}\n              pagination={false}\n              columns={[\n                { title: 'Parameter', key: 'parameter', dataIndex: 'name' },\n                { title: 'Value', key: 'parameter-value', dataIndex: 'value' },\n              ]}\n            />\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default SitesAdmin;\n","import { useState } from 'react';\nimport { useLazyQuery, gql } from '@apollo/client';\ntype Column = {\n  columnName: string;\n  type: string;\n  autoIncrement: boolean | null;\n  nullable: boolean | null;\n  default: any;\n  api: boolean | null;\n  maxLength: string | null;\n  required: boolean | string | null;\n  censor?: boolean | null;\n  allowedValues?: string[] | null;\n};\n\nconst ENTITY_DETAILS_QUERY = gql`\n  query($entityName: String) {\n    xenforoEntity(entityName: $entityName) {\n      shortName\n      contentType\n      table\n      primaryKey\n      columns {\n        columnName\n        type\n        autoIncrement\n        nullable\n        default\n        api\n        maxLength\n        required\n        censor\n        allowedValues\n      }\n    }\n  }\n`;\n\nconst XenforoEntity = (props: any) => {\n  const [entityName, setEntityName] = useState('');\n  const [getEntityDetails, { data, loading, error }] = useLazyQuery(\n    ENTITY_DETAILS_QUERY,\n  );\n\n  if (data && !error) {\n    console.log('got data for entity', data);\n  }\n  const columns: Column[] = data ? data.xenforoEntity.columns : [];\n\n  const makeFieldInfo = (el: Column) => {\n    const name = el.required ? <b>{el.columnName}</b> : el.columnName;\n    const type = el.type + (el.maxLength ? `(${el.maxLength})` : '');\n    const defaultValue = el.default ? <i>{el.default}</i> : '';\n    const allowedValues = el.allowedValues?.length\n      ? el.allowedValues.map((v) => `\"${v}\"`).join('; ')\n      : '';\n    return (\n      <tr>\n        <td>{name}</td>\n        <td>{type}</td>\n        <td>{defaultValue}</td>\n        <td>{allowedValues}</td>\n      </tr>\n    );\n  };\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={entityName}\n        onChange={(el) => setEntityName(el.target.value)}\n      />\n      <button\n        onClick={async () => {\n          getEntityDetails({ variables: { entityName } });\n        }}\n      >\n        Run\n      </button>\n      <span>{loading ? 'Loading...' : ''}</span>\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Type</th>\n            <th>Default</th>\n            <th>Allowed values</th>\n          </tr>\n        </thead>\n        {columns.map((el) => makeFieldInfo(el))}\n      </table>\n    </div>\n  );\n};\n\nexport default XenforoEntity;\n","import { useEffect, useState } from 'react';\nimport { useQuery, gql, useLazyQuery, ApolloError } from '@apollo/client';\n\nconst GET_DATABASES_QUERY = gql`\n  query {\n    databases\n  }\n`;\n\nconst MULTI_DB_QUERY = gql`\n  query($query: String, $databases: [String]) {\n    multiQuery(databases: $databases, query: $query) {\n      database\n      isError\n      result {\n        rowCount\n      }\n    }\n  }\n`;\n\nconst filterFn = (filter: string, db: string) => {\n  let isMatch;\n  if (filter === '') {\n    return true;\n  }\n  try {\n    isMatch = db.match(filter);\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      isMatch = true;\n    } else {\n      isMatch = true;\n    }\n  }\n  return isMatch;\n};\nconst DBList = ({\n  databases,\n  onFilter,\n}: {\n  databases: string[];\n  onFilter: (dbs: string[]) => any;\n}) => {\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    onFilter(databases.filter((db) => filterFn(filter, db)));\n  }, [onFilter, databases, filter]);\n\n  return (\n    <>\n      <input\n        name=\"filter\"\n        value={filter}\n        onChange={(e) => setFilter(e.target.value)}\n        placeholder=\"Search for item...\"\n      />\n      <ul>\n        {databases\n          .filter((db) => filterFn(filter, db))\n          .map((db) => {\n            return <li key={db}>{db}</li>;\n          })}\n      </ul>\n    </>\n  );\n};\n\nconst QueryBox = ({\n  filtered,\n  queryFn,\n}: {\n  filtered: string[];\n  queryFn: any;\n}) => {\n  const [query, setQuery] = useState<string>('');\n  return (\n    <div>\n      <div>\n        <label style={{ display: 'block' }}>Query:</label>\n        <textarea onChange={(e) => setQuery(e.target.value)} value={query} />\n      </div>\n      <div>\n        <button onClick={(e) => queryFn(query)}>\n          Run query on {filtered.length} databases\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst ResultsDisplay = ({\n  results,\n  error,\n}: {\n  results?: [\n    {\n      database: string;\n      isError: boolean;\n      result: { rows: string[]; rowCount: number };\n    },\n  ];\n  error?: ApolloError;\n}) => {\n  const resultsTable = results && (\n    <table>\n      <thead>\n        <tr>\n          <th>Database</th>\n          <th>Row count</th>\n        </tr>\n      </thead>\n      {results.map((result, index) => {\n        return (\n          <tr>\n            <td>{result.database}</td>\n            <td>{result.result.rowCount}</td>\n          </tr>\n        );\n      })}\n    </table>\n  );\n  console.log('Got results', results);\n  if (error) {\n    return <div>{error.message}</div>;\n  }\n  return (\n    <div>\n      <div>Results ({results?.length || 'N/A'})</div>\n      {resultsTable}\n    </div>\n  );\n};\n\nconst DBQuery = (props: any) => {\n  const { data, loading, error } = useQuery(GET_DATABASES_QUERY);\n  const [filtered, setFiltered] = useState<string[]>([]);\n  const [\n    queryMulti,\n    { data: entriesData, loading: resultsLoading, error: entriesError },\n  ] = useLazyQuery(MULTI_DB_QUERY, { fetchPolicy: 'network-only' });\n\n  console.log('entriesData', entriesData);\n  if (entriesError) {\n    console.log('error on results', entriesError);\n  }\n\n  const results =\n    entriesData && entriesData.multiQuery ? entriesData.multiQuery : null;\n\n  if (error) {\n    return <div>Error querying GraphQL. Details: {error?.message || ''}</div>;\n  }\n  return (\n    <div\n      style={{\n        // display: 'flex',\n        flexDirection: 'row',\n        display: props.style.display === 'block' ? 'flex' : 'none',\n      }}\n    >\n      <div style={{ width: '33%', height: '100vh' }}>\n        <p>Database list {loading ? '(loading)' : ''}</p>\n        <div>\n          {!loading && (\n            <DBList databases={data.databases} onFilter={setFiltered} />\n          )}\n        </div>\n      </div>\n      <div style={{ width: '64%' }}>\n        <QueryBox\n          filtered={filtered}\n          queryFn={(query: string) => {\n            const vars = {\n              variables: {\n                databases: filtered,\n                query,\n              },\n              fetchPolicy: 'no-cache',\n            };\n            console.log('queryMulti vars', vars);\n            queryMulti(vars);\n          }}\n        />\n        <div>\n          Results: {resultsLoading ? '(loading...)' : ''}\n          {entriesError ? '' + entriesError : ''}\n        </div>\n        <ResultsDisplay results={results} error={entriesError} />\n      </div>\n    </div>\n  );\n};\n\nexport default DBQuery;\n","import {\n  BrowserRouter as Router,\n  Route,\n  NavLink as Link,\n} from 'react-router-dom';\nimport './../styles/App.css';\nimport Unserializer from './Unserializer';\nimport SitesAdmin from './SitesAdmin';\nimport { Layout, Menu } from 'antd';\nimport XenforoEntity from './XenforoEntity';\n\nimport DBQuery from './DBQuery';\n\nconst { Header, Content } = Layout;\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Layout className=\"layout\">\n          <Header>\n            <Menu mode=\"horizontal\" theme=\"dark\">\n              <Menu.Item>\n                <Link to=\"/xf-entity\">Entity Browser</Link>\n              </Menu.Item>\n              <Menu.Item>\n                <Link to=\"/\">DBQuery</Link>\n              </Menu.Item>\n              <Menu.Item>\n                <Link to=\"/sites-admin\">Sites Admin</Link>\n              </Menu.Item>\n              <Menu.Item>\n                <Link to=\"/unserialize\">Unserialize</Link>\n              </Menu.Item>\n            </Menu>\n          </Header>\n          <Content>\n            <Route\n              path=\"/\"\n              children={({ match }) => {\n                console.log('match', match);\n                return (\n                  <DBQuery\n                    style={{ display: match.isExact ? 'block' : 'none' }}\n                  />\n                );\n              }}\n            />\n            <Route exact path=\"/xf-entity\" component={XenforoEntity} />\n            <Route exact path=\"/sites-admin\" component={SitesAdmin} />\n            <Route exact path=\"/unserialize\" component={Unserializer} />\n          </Content>\n        </Layout>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n} from '@apollo/client';\n\nconst httpLink = createHttpLink({\n  uri: process.env.REACT_APP_GRAPHQL_URL || 'http://localhost:4000/graphql',\n});\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}